language: rust

stages:
- check
- test
- sanitize
- benchmark

addons:
  apt:
    packages:
      - libgtk-3-dev
      - libssl-dev

jobs:
  include:
  - name: fmt
    stage: check
    rust: stable
    os: linux
    install:
    - rustup component add rustfmt
    script:
    - cargo fmt --all -- --check

  - name: clippy
    stage: check
    rust: stable
    os: linux
    install:
    - rustup component add clippy --toolchain stable
    script:
    - cargo +stable clippy --lib --examples -- -D warnings

  - name: coverage
    stage: check
    rust: nightly
    os: linux
    install:
    - cargo +nightly install cargo-tarpaulin
    script:
    - travis_retry cargo +nightly tarpaulin -v --all-features --out Xml
    after_success:
    - bash <(curl -s https://codecov.io/bash)

  - name: doc
    stage: check
    rust: nightly
    os: linux
    script:
    - cargo +nightly doc --all-features

  - name: no-default-features
    stage: test
    rust: stable
    os: linux
    script:
    - cargo +stable test --no-default-features

  - name: no-default-features
    stage: test
    rust: stable
    os: osx
    script:
    - cargo +stable test --no-default-features

  - name: no-default-features
    stage: test
    rust: stable
    os: windows
    script:
    - cargo +stable test --no-default-features

  - name: default-features
    stage: test
    rust: stable
    os: linux
    script:
    - cargo +stable test

  - name: default-features
    stage: test
    rust: stable
    os: osx
    script:
    - cargo +stable test

  - name: default-features
    stage: test
    rust: stable
    os: windows
    script:
    - cargo +stable test

  - name: all-features
    stage: test
    rust: nightly
    os: linux
    script:
    - cargo +nightly test --all-features

  - name: all-features
    stage: test
    rust: nightly
    os: osx
    script:
    - cargo +nightly test --all-features

  - name: all-features
    stage: test
    rust: nightly
    os: windows
    script:
    - cargo +nightly test --all-features

  - name: address
    stage: sanitize
    rust: nightly
    os: linux
    script:
    - RUSTFLAGS="-Z sanitizer=address" cargo test --tests --lib -v --all-features --target x86_64-unknown-linux-gnu

  - name: leak
    stage: sanitize
    rust: nightly
    os: linux
    script:
    - RUSTFLAGS="-Z sanitizer=leak" cargo test --tests --lib -v --all-features --target x86_64-unknown-linux-gnu

  - stage: benchmark
    if: type = pull_request
    rust: nightly
    os: linux
    script:
    - cargo bench --all-features
